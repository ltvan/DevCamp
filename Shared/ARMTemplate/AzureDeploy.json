{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
  },
  "variables": {
    "apiAppName": "[concat('incidentapi', uniqueString(resourceGroup().id))]",
    "dotnetAppName": "[concat('dotnetapp', uniqueString(resourceGroup().id))]",
    "nodejsAppName": "[concat('nodejsapp', uniqueString(resourceGroup().id))]",
    "javaAppName": "[concat('javaapp', uniqueString(resourceGroup().id))]",
    "hostingPlanName": "[concat('incidentappplan', uniqueString(resourceGroup().id))]",
    "skuCapacity": "1",
    "skuName": "F1",
    "repoURL": "https://github.com/AzureCAT-GSI/DevCampSharedDotNetAPI.git",
    "repoBranch": "master",
    "storageName": "[substring(toLower(concat('incidentblobstg', uniqueString(resourceGroup().id))), 0, 24)]",
    "storageType": "Standard_LRS",
    "queueName": "thumbnails",
    "imgContainerName": "images",
    "docDBName": "[concat('incidentdb', uniqueString(resourceGroup().id))]",
    "docDBCollectionId": "incidents",
    "redisCacheName": "[concat('incidentcache', uniqueString(resourceGroup().id))]",
    "redisCacheSKUName": "Standard",
    "redisCacheSKUFamily": "C",
    "redisCacheSKUCapacity": "1",
    "redisCacheRedisVersion": "3.0",
    "enableNonSslPort": "false",
    "diagStorageName": "[substring(toLower(concat('incidentdiagstg', uniqueString(resourceGroup().id))), 0, 24)]",
    "vmStorageName": "[toLower(concat('vmStorage', uniqueString(resourceGroup().id)))]",
    "devVnetID": "[resourceId('Microsoft.Network/virtualNetworks', 'DevCampVnet')]",
    "devSubnetRef": "[concat(variables('devVnetID'), '/subnets/', variables('devCampVnetSubnet1Name'))]",
    "devCampVnetPrefix": "10.0.0.0/16",
    "devCampVnetSubnet1Name": "Subnet-1",
    "devCampVnetSubnet1Prefix": "10.0.0.0/24",
    "ubuntuMachineName": "[substring(concat('ubudev', uniqueString(resourceGroup().id)), 0, 15)]",
    "ubuntuAdminUserName": "l-admin",
    "ubuntuAdminPassword": "Devc@mp2016!",
    "ubuntuOSVersion": "14.04.2-LTS",
    "ubuntuImagePublisher": "Canonical",
    "ubuntuImageOffer": "UbuntuServer",
    "ubuntuOSDiskName": "ubuntuOSDisk",
    "ubuntuVmSize": "Standard_D2_v2",
    "ubuntuVnetID": "[resourceId('Microsoft.Network/virtualNetworks', 'DevCampVnet')]",
    "ubuntuSubnetRef": "[concat(variables('ubuntuVnetID'), '/subnets/', variables('devCampVnetSubnet1Name'))]",
    "ubuntuStorageAccountContainerName": "vhds",
    "ubuntuNicName": "[concat(variables('ubuntuMachineName'), 'NetworkInterface')]",
    "ubuntuDevPipName": "UbuntuDevPip",
    "ubuntuDevPipDnsName": "[substring(concat('ubudev', uniqueString(resourceGroup().id)), 0, 15)]",
    "windowsMachineName": "[substring(concat('windev', uniqueString(resourceGroup().id)), 0, 15)]",
    "windowsAdminUserName": "l-admin",
    "windowsAdminPassword": "Devc@mp2016!",
    "windowsWindowsOSVersion": "2012-R2-Datacenter",
    "windowsImagePublisher": "MicrosoftWindowsServer",
    "windowsImageOffer": "WindowsServer",
    "windowsOSDiskName": "WinDevOSDisk",
    "windowsVmSize": "Standard_D2_v2",
    "windowsStorageAccountContainerName": "vhds",
    "windowsDevNicName": "[concat(variables('windowsMachineName'), 'NetworkInterface')]",
    "windowsDevPipName": "WinDevPip",
    "windowsDevPipDnsName": "[substring(concat('windev', uniqueString(resourceGroup().id)), 0, 15)]",
    "chocoPackages": "sysinternals;7zip.install;nodejs.install;git-credential-winstore;git.install;git;poshgit;sublimetext3;fiddler4;webpicmd;visualstudiocode;eclipse;azurestorageexplorer;office365business;googlechrome;postman;jsonedit;windowsazurepowershell;jre8;javaruntime",
    "setupChocolateyScriptFileName": "SetupChocolatey.ps1",
    "setupChocolatelyScriptLocation": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/visual-studio-dev-vm-chocolatey/scripts/"
  },
  "resources": [
    {
      "name": "[variables('storageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "Storage"
      },
      "properties": {
        "accountType": "[variables('storageType')]"
      }
    },
    {
      "name": "[variables('diagStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "DiagnosticStorage"
      },
      "properties": {
        "accountType": "[variables('storageType')]"
      }
    },
    {
      "name": "[variables('vmStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "VmStorage"
      },
      "properties": {
        "accountType": "[variables('storageType')]"
      }
    },
    {
      "name": "[variables('redisCacheName')]",
      "type": "Microsoft.Cache/Redis",
      "location": "[resourceGroup().location]",
      "apiVersion": "2014-04-01-preview",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('diagStorageName'))]"
      ],
      "tags": {
        "displayName": "RedisCache"
      },
      "properties": {
        "sku": {
          "name": "[variables('redisCacheSKUName')]",
          "family": "[variables('redisCacheSKUFamily')]",
          "capacity": "[variables('redisCacheSKUCapacity')]"
        },
        "redisVersion": "[variables('redisCacheRedisVersion')]"
      }
    },
    {
      "apiVersion": "2015-04-08",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[variables('docDBName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[variables('docDBName')]",
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session",
          "maxStalenessPrefix": 100,
          "maxIntervalInSeconds": 5
        }
      },
      "tags": {
        "displayName": "DocumentDB"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('hostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "HostingPlan"
      },
      "sku": {
        "name": "[variables('skuName')]",
        "capacity": "[variables('skuCapacity')]"
      },
      "properties": {
        "name": "[variables('hostingPlanName')]"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('apiAppName')]",
      "kind": "api",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "Resource",
        "displayName": "ApiApp"
      },
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      ],
      "properties": {
        "name": "[variables('apiAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
      },
      "resources": [
        {
          "name": "appsettings",
          "type": "config",
          "apiVersion": "2015-08-01",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('apiAppName'))]",
            "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
            "[concat('Microsoft.DocumentDB/databaseAccounts/', variables('docDBName'))]"
          ],
          "tags": {
            "displayName": "AppSettings"
          },
          "properties": {
            "AZURE_STORAGE_ACCOUNT": "[variables('storageName')]",
            "AZURE_STORAGE_ACCESS_KEY": "[listKeys(resourceId('Microsoft.Storage/storageAccounts/', variables('storageName')), '2016-01-01').keys[0].value]",
            "AZURE_STORAGE_BLOB_CONTAINER": "[variables('imgContainerName')]",
            "AZURE_STORAGE_QUEUE": "[variables('queueName')]",
            "DOCUMENTDB_ENDPOINT": "[reference(concat('Microsoft.DocumentDb/databaseAccounts/', variables('docDBName'))).documentEndpoint]",
            "DOCUMENTDB_COLLECTIONID": "[variables('docDBCollectionId')]",
            "DOCUMENTDB_DATABASEID": "[variables('docDBName')]",
            "DOCUMENTDB_PRIMARY_KEY": "[listKeys(resourceId('Microsoft.DocumentDb/databaseAccounts', variables('docDBName')), '2015-04-08').primaryMasterKey]",
            "REDISCACHE_HOSTNAME": "[reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').hostName]",
            "REDISCACHE_PORT": "[reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').port]",
            "REDISCACHE_SSLPORT": "[reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').sslPort]",
            "REDISCACHE_PRIMARY_KEY": "[listKeys(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').primaryKey]"
          }
        },
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('apiAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[variables('repoURL')]",
            "branch": "[variables('repoBranch')]",
            "IsManualIntegration": false
          },
          "tags": {
            "displayName": "Deployment"
          }
        }
      ]
    },
    {
      "name": "[variables('dotnetAppName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-08-01",
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      ],
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "Resource",
        "displayName": "DotnetApp"
      },
      "properties": {
        "name": "[variables('dotnetAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      },
      "resources": [
        {
          "name": "appsettings",
          "type": "config",
          "apiVersion": "2015-08-01",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('dotnetAppName'))]",
            "[concat('Microsoft.Web/sites/', variables('apiAppName'))]"
          ],
          "tags": {
            "displayName": "AppSettings"
          },
          "properties": {
            "AZURE_STORAGE_ACCOUNT": "[variables('storageName')]",
            "AZURE_STORAGE_ACCESS_KEY": "[listKeys(resourceId('Microsoft.Storage/storageAccounts/', variables('storageName')), '2016-01-01').keys[0].value]",
            "AZURE_STORAGE_BLOB_CONTAINER": "[variables('imgContainerName')]",
            "AZURE_STORAGE_QUEUE": "[variables('queueName')]",
            "INCIDENT_API_URL": "[concat('https://', reference(resourceId('Microsoft.Web/sites/', variables('apiAppName')),'2015-08-01').defaultHostName)]",
            "REDISCACHE_HOSTNAME": "[reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').hostName]",
            "REDISCACHE_PORT": "[reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').port]",
            "REDISCACHE_SSLPORT": "[reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').sslPort]",
            "REDISCACHE_PRIMARY_KEY": "[listKeys(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').primaryKey]"
          }
        }
      ]
    },
    {
      "name": "[variables('nodejsAppName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-08-01",
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]",
        "[concat('Microsoft.Web/sites/', variables('apiAppName'))]"
      ],
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "Resource",
        "displayName": "NodejsApp"
      },
      "properties": {
        "name": "[variables('nodejsAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      },
      "resources": [
        {
          "name": "appsettings",
          "type": "config",
          "apiVersion": "2015-08-01",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('nodejsAppName'))]"
          ],
          "tags": {
            "displayName": "AppSettings"
          },
          "properties": {
            "WEBSITE_NODE_DEFAULT_VERSION": "6.7.0",
            "AZURE_STORAGE_ACCOUNT": "[variables('storageName')]",
            "AZURE_STORAGE_ACCESS_KEY": "[listKeys(resourceId('Microsoft.Storage/storageAccounts/', variables('storageName')), '2016-01-01').keys[0].value]",
            "AZURE_STORAGE_BLOB_CONTAINER": "[variables('imgContainerName')]",
            "AZURE_STORAGE_QUEUE": "[variables('queueName')]",
            "INCIDENT_API_URL": "[concat('https://', reference(resourceId('Microsoft.Web/sites/', variables('apiAppName')),'2015-08-01').defaultHostName)]",
            "REDISCACHE_HOSTNAME": "[reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').hostName]",
            "REDISCACHE_PORT": "[reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').port]",
            "REDISCACHE_SSLPORT": "[reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').sslPort]",
            "REDISCACHE_PRIMARY_KEY": "[listKeys(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').primaryKey]"
          }
        }
      ]
    },
    {
      "name": "[variables('javaAppName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-08-01",
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]",
        "[concat('Microsoft.Web/sites/', variables('apiAppName'))]"
      ],
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "Resource",
        "displayName": "JavaApp"
      },
      "properties": {
        "name": "[variables('javaAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "config",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('javaAppName'))]"
          ],
          "properties": {
            "javaVersion": "1.8",
            "javaContainer": "TOMCAT",
            "javaContainerVersion": "8.0"
          }
        },
        {
          "name": "appsettings",
          "type": "config",
          "apiVersion": "2015-08-01",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('javaAppName'))]"
          ],
          "properties": {
            "AZURE_STORAGE_ACCOUNT": "[variables('storageName')]",
            "AZURE_STORAGE_ACCESS_KEY": "[listKeys(resourceId('Microsoft.Storage/storageAccounts/', variables('storageName')), '2016-01-01').keys[0].value]",
            "AZURE_STORAGE_BLOB_CONTAINER": "[variables('imgContainerName')]",
            "AZURE_STORAGE_QUEUE": "[variables('queueName')]",
            "INCIDENT_API_URL": "[concat('https://', reference(resourceId('Microsoft.Web/sites/', variables('apiAppName')),'2015-08-01').defaultHostName)]",
            "REDISCACHE_HOSTNAME": "[reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').hostName]",
            "REDISCACHE_PORT": "[reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').port]",
            "REDISCACHE_SSLPORT": "[reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').sslPort]",
            "REDISCACHE_PRIMARY_KEY": "[listKeys(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2014-04-01').primaryKey]"
          },
          "tags": {
            "displayName": "AppSettings"
          }
        }
      ]
    },
    {
      "name": "DevCampVnet",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "DevCampVnet"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('devCampVnetPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('devCampVnetSubnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('devCampVnetSubnet1Prefix')]"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('ubuntuNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', 'devCampVnet')]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('UbuntuDevPipName'))]"
      ],
      "tags": {
        "displayName": "UbuntuDevNic"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('ubuntuSubnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('UbuntuDevPipName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[variables('UbuntuDevPipName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "UbuntuDevPip"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('ubuntuDevPipDnsName')]"
        }
      }
    },
    {
      "name": "[variables('ubuntuMachineName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('vmStorageName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('ubuntuNicName'))]"
      ],
      "tags": {
        "displayName": "UbuntuDev"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('ubuntuVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('ubuntuMachineName')]",
          "adminUsername": "[variables('ubuntuAdminUserName')]",
          "adminPassword": "[variables('ubuntuAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('ubuntuImagePublisher')]",
            "offer": "[variables('ubuntuImageOffer')]",
            "sku": "[variables('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "ubuntuOSDisk",
            "vhd": {
              "uri": "[concat('https://', variables('vmStorageName'), '.blob.core.windows.net/', variables('ubuntuStorageAccountContainerName'), '/', variables('ubuntuOSDiskName'), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('ubuntuNicName'))]"
            }
          ]
        }
      }
    },
    {
      "name": "[variables('windowsDevNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', 'devCampVnet')]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('WindowsDevPipName'))]"
      ],
      "tags": {
        "displayName": "WinDevNic"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('devSubnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('WindowsDevPipName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[variables('WindowsDevPipName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "WinDevPip"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('windowsDevPipDnsName')]"
        }
      }
    },
    {
      "name": "[variables('windowsMachineName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('vmStorageName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('windowsDevNicName'))]"
      ],
      "tags": {
        "displayName": "WinDev"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('windowsVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('windowsMachineName')]",
          "adminUsername": "[variables('windowsAdminUserName')]",
          "adminPassword": "[variables('windowsAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftVisualStudio",
            "offer": "VisualStudio",
            "sku": "VS-2015-Comm-VSU3-AzureSDK-291-WS2012R2",
            "version": "latest"
          },
          "osDisk": {
            "name": "WinDevOSDisk",
            "vhd": {
              "uri": "[concat('https://', variables('VmStorageName'), '.blob.core.windows.net/', variables('windowsStorageAccountContainerName'), '/', variables('windowsOSDiskName'), '.vhd')]"
            },
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('windowsDevNicName'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "name": "SetupChocolatey",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', variables('windowsMachineName'))]"
          ],
          "tags": {
            "displayName": "SetupChocolatey"
          },
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(variables('setupChocolatelyScriptLocation'), variables('setupChocolateyScriptFileName'))]"
              ],
              "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ',variables('setupChocolateyScriptFileName'),' ',variables('chocoPackages'),' ')]"
            }
          }
        }
      ]
    }
  ]
}
